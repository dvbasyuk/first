{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHook.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","descriptionBlock","descriptionimg","postsBlock","posts","item","React","Component","ProfileStatusWithHook","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","react_default","a","createElement","onDoubleClick","value","onBlur","updateStatus","autoFocus","onChange","e","currentTarget","ProfileInfo","profile","className","s","src","photos","small","ProfileInfo_ProfileStatusWithHook","Preloader","Post","message","likesCount","maxLength10","maxLengthCreator","MyPosts","memo","console","log","postsElements","map","p","MyPosts_Post_Post","MyPostFormRedux","onSubmit","addPost","newPostText","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","requiredField","placeholder","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","userId","this","match","params","id","authorisedUserId","history","push","userInfo","getStatus","components_Profile_Profile","assign","compose","auth","isAuth","withRouter"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,iBAAA,sCAAAC,eAAA,0DCAlBH,EAAAC,QAAA,CAAkBG,WAAA,4BAAAC,MAAA,6CCAlBL,EAAAC,QAAA,CAAkBK,KAAA,8ICCUC,IAAMC,kBCqCnBC,EApCe,SAACC,GAAU,IAAAC,EAEPC,oBAAS,GAFFC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEhCK,EAFgCH,EAAA,GAEtBI,EAFsBJ,EAAA,GAAAK,EAGXN,mBAASF,EAAMS,QAHJC,EAAAN,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGhCC,EAHgCC,EAAA,GAGxBC,EAHwBD,EAAA,GAIrCE,oBAAU,WACND,EAAUX,EAAMS,SACjB,CAACT,EAAMS,SAaV,OACII,EAAAC,EAAAC,cAAA,YACMT,GACEO,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,cAdG,WACrBT,GAAY,KAawCE,GAAU,SAExDH,GACEO,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOE,MAAOR,EACVS,OAhBO,WACvBX,GAAY,GACZP,EAAMmB,aAAaV,IAeHW,WAAW,EACXC,SAdG,SAACC,GACpBX,EAAUW,EAAEC,cAAcN,aCAnBO,EAdK,SAACxB,GACjB,OAAKA,EAAMyB,QAIPZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKW,UAAWC,IAAEnC,kBACdqB,EAAAC,EAAAC,cAAA,OAAKa,IAAK5B,EAAMyB,QAAQI,OAAOC,QAC/BjB,EAAAC,EAAAC,cAACgB,EAAD,CAAuBtB,OAAQT,EAAMS,OAASU,aAAcnB,EAAMmB,iBANnEN,EAAAC,EAAAC,cAACiB,EAAA,EAAD,qFCOAC,EAZF,SAACjC,GACZ,OACEa,EAAAC,EAAAC,cAAA,OAAKW,UAAWC,IAAE/B,MAChBiB,EAAAC,EAAAC,cAAA,OAAKa,IAAI,6FACL5B,EAAMkC,QACNrB,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,oBADE,IACkBf,EAAMmC,cCD5BC,EAAcC,YAAiB,IAE/BC,EAAUzC,IAAM0C,KAAK,SAACvC,GACxBwC,QAAQC,IAAI,iBACZ,IAAIC,EAAgB1C,EAAML,MAAMgD,IAAI,SAAAC,GAAC,OAAI/B,EAAAC,EAAAC,cAAC8B,EAAD,CAAMX,QAASU,EAAEV,QAASC,WAAYS,EAAET,eAMjF,OACItB,EAAAC,EAAAC,cAAA,OAAKW,UAAWC,IAAEjC,YACdmB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAC+B,EAAD,CAAiBC,SAPT,SAAC9B,GACbjB,EAAMgD,QAAQ/B,EAAMgC,gBAOhBpC,EAAAC,EAAAC,cAAA,OAAKW,UAAWC,IAAEhC,OACb+C,MAkBXI,EAAkBI,YAAU,CAAEC,KAAM,cAAlBD,CAZL,SAAClD,GAChB,OACIa,EAAAC,EAAAC,cAAA,QAAMgC,SAAU/C,EAAMoD,cAClBvC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,KAAM,cAAeC,SAAU,CAACC,IAAetB,GAAcuB,YAAa,qBAE1G9C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8BAMDuB,YCtBAsB,EAFUC,YAbD,SAACC,GACrB,MAAO,CACHnE,MAAOmE,EAAMC,YAAYpE,QAGN,SAACqE,GACxB,MAAO,CACHhB,QAAS,SAACC,GACNe,EAASC,YAAqBhB,OAKjBY,CAA6CvB,GCLvD4B,EATC,SAAClE,GACb,OACIa,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoD,EAAD,CAAa1C,QAASzB,EAAMyB,QAAShB,OAAQT,EAAMS,OAASU,aAAcnB,EAAMmB,eAChFN,EAAAC,EAAAC,cAACqD,EAAD,wBCDNC,oLAGE,IAAIC,EAASC,KAAKvE,MAAMwE,MAAMC,OAAOC,GAChCJ,IAEFA,EAASC,KAAKvE,MAAM2E,mBAEhBJ,KAAKvE,MAAM4E,QAAQC,KAAK,UAG/BN,KAAKvE,MAAM8E,SAASR,GACpBC,KAAKvE,MAAM+E,UAAUT,oCAGrB,OACIzD,EAAAC,EAAAC,cAACiE,EAAD5E,OAAA6E,OAAA,GAAaV,KAAKvE,MAAlB,CAAyBS,OAAQ8D,KAAKvE,MAAMS,OAASU,aAAcoD,KAAKvE,MAAMmB,uBAhB3DtB,IAAMC,WA4BtBoF,sBACXrB,YARkB,SAACC,GAAD,MAAY,CAC9BrC,QAASqC,EAAMC,YAAYtC,QAC3BhB,OAAQqD,EAAMC,YAAYtD,OAC1BkE,iBAAkBb,EAAMqB,KAAKT,GAC7BU,OAAQtB,EAAMqB,KAAKC,SAIM,CAAEN,aAAUC,cAAW5D,mBAChDkE,IAFWH,CAIbb","file":"static/js/3.dbd3467c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2vypv\",\"descriptionimg\":\"ProfileInfo_descriptionimg__16Z8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__NIwcQ\",\"posts\":\"MyPosts_posts__Xs8wV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__WH1DL\"};","import React from 'react';\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n        console.log(\"componentDidUpdate\");\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        // this.state.editMode = true\r\n        // this.forceUpdate();  \r\n        this.setState({ editMode: true })\r\n    }\r\n    diActivateEditMode = () => {\r\n\r\n        this.setState({ editMode: false })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e) => {\r\n\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || \"----\"}</span>\r\n                    </div>}\r\n\r\n                { this.state.editMode &&\r\n                    <div>\r\n                        <input value={this.state.status}\r\n                            onBlur={this.diActivateEditMode}\r\n                            autoFocus={true}\r\n                            onChange={this.onStatusChange}></input>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React, { useEffect, useState } from 'react';\r\n\r\n\r\nconst ProfileStatusWithHook = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const diActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || \"----\"}</span>\r\n                </div>}\r\n            { editMode &&\r\n                <div>\r\n                    <input value={status}\r\n                        onBlur={diActivateEditMode}\r\n                        autoFocus={true}\r\n                        onChange={onStatusChange} ></input>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHook;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHook from './ProfileStatusWithHook';\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.small} />\r\n                <ProfileStatusWithHook status={props.status}  updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://i.etsystatic.com/7725562/r/il/9ba942/1809002353/il_fullxfull.1809002353_9ecu.jpg' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, requiredField } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControl';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    console.log(\"MyPost render\");\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} />);\r\n\r\n    let onAddPost = (value) => {\r\n        props.addPost(value.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <MyPostFormRedux onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst MyPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPostText\"} validate={[requiredField, maxLength10]} placeholder={\"Enter your post\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst MyPostFormRedux = reduxForm({ form: 'myPostForm' })(MyPostForm)\r\nexport default MyPosts;","import React from 'react';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status}  updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getStatus, updateStatus, userInfo } from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.id\r\n        if (!userId) { //если нет id то это мой профиль\r\n           // userId = 11409\r\n           userId = this.props.authorisedUserId\r\n           if(!userId){\r\n               this.props.history.push(\"/login\")\r\n           }\r\n        }\r\n        this.props.userInfo(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} status={this.props.status}  updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n\r\n}\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { userInfo, getStatus, updateStatus }),\r\n    withRouter\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// export default connect(mapStateToProps, { userInfo })(WithRouterProfile);"],"sourceRoot":""}