{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHook.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","descriptionBlock","descriptionimg","mainPhoto","contacts","separator","postsBlock","posts","item","ProfileStatusWithHook","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","react_default","a","createElement","onDoubleClick","value","onBlur","updateStatus","autoFocus","onChange","e","currentTarget","ProfileDataFormReduxForm","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","className","style","forSummaryError","createField","Input","type","Textarea","keys","map","key","s","ProfileData","isOwner","onClick","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo_Contact","contactTitle","contactValue","Contact","ProfileInfo","Preloader","src","photos","small","userPhoto","target","files","length","savePhoto","ProfileInfo_ProfileStatusWithHook","ProfileInfo_ProfileDataForm","initialValues","formData","saveProfile","then","ProfileInfo_ProfileData","Post","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","console","log","postsElements","p","MyPosts_Post_Post","id","MyPostFormRedux","addPost","newPostText","Field","component","name","validate","requiredField","placeholder","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","userId","this","match","params","authorisedUserId","userInfo","getStatus","history","push","refreshProfile","prevProps","prevState","snapshot","components_Profile_Profile","assign","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.a105719f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2vypv\",\"descriptionimg\":\"ProfileInfo_descriptionimg__16Z8R\",\"mainPhoto\":\"ProfileInfo_mainPhoto__35VN4\",\"contacts\":\"ProfileInfo_contacts__2_eVw\",\"separator\":\"ProfileInfo_separator__2vafU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__NIwcQ\",\"posts\":\"MyPosts_posts__Xs8wV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__WH1DL\"};","import React, { useEffect, useState } from 'react';\r\n\r\n\r\nconst ProfileStatusWithHook = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const diActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || \"----\"}</span>\r\n                </div>}\r\n            { editMode &&\r\n                <div>\r\n                    <input value={status}\r\n                        onBlur={diActivateEditMode}\r\n                        autoFocus={true}\r\n                        onChange={onStatusChange} ></input>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHook;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport style from '../../common/FormsControls/FormsControl.module.css'\r\nimport { reduxForm } from 'redux-form';\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControl';\r\n\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n                {error && <div className={style.forSummaryError}>\r\n                    {error}\r\n                </div>}\r\n            </div>\r\n            <div>\r\n                <b>Full name</b>: {createField(\"Name\", Input, \"fullName\", [])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField(\"\", Input, \"lookingForAJob\", [], { type: \"checkbox\" })}\r\n            </div>\r\n            <div>\r\n                <b>My profassional skills</b>: {createField(\"My profassional skills\", Textarea, \"LookingForAJobDescription\", [])}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField(\"About me\", Textarea, \"aboutMe\", [])}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} className={s.contacts}>\r\n                        {createField(key, Input, \"contacts.\" + key, [])}\r\n                    </div>\r\n                })}\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'editProfile' })(ProfileDataForm)\r\nexport default ProfileDataFormReduxForm;","import React, { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHook from './ProfileStatusWithHook';\r\nimport userPhoto from '../../../imges/photo.jpg'\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    const mainPhotoSelectedOn = (e) => {\r\n        if (e.target.files.length)\r\n            props.savePhoto(e.target.files[0])\r\n    }\r\n    const onSubmit = (formData) => {\r\n        // setEditMode(false)\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <img src={props.profile.photos.small || userPhoto} className={s.mainPhoto} />\r\n            {props.isOwner &&\r\n                <input type={\"file\"} onChange={mainPhotoSelectedOn} />}\r\n            <ProfileStatusWithHook status={props.status} updateStatus={props.updateStatus} />\r\n            <div className={s.separator}>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={props.profile} onSubmit={onSubmit} profile={props.profile} />\r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => { setEditMode(true) }} />}\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst ProfileData = (props) => {\r\n    return (\r\n        <div>\r\n            {props.isOwner &&\r\n                <div>\r\n                    <button onClick={props.goToEditMode}>Edit</button>\r\n                </div>}\r\n            <div>\r\n                <b>Full name</b>: {props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for  a job</b>: {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {props.profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My profassional skills</b>: {props.profile.lookingForAJobDescription}\r\n                </div>}\r\n            <div>\r\n                <b>About me</b>: {props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\r\n                })}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <div className={s.contacts}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>)\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://i.etsystatic.com/7725562/r/il/9ba942/1809002353/il_fullxfull.1809002353_9ecu.jpg' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, requiredField } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControl';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    console.log(\"MyPost render\");\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id}/>);\r\n\r\n    let onAddPost = (value) => {\r\n        props.addPost(value.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <MyPostFormRedux onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst MyPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPostText\"} validate={[requiredField, maxLength10]} placeholder={\"Enter your post\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst MyPostFormRedux = reduxForm({ form: 'myPostForm' })(MyPostForm)\r\nexport default MyPosts;","import React from 'react';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                saveProfile={props.saveProfile} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getStatus, updateStatus, userInfo, savePhoto, saveProfile } from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n    refreshProfile() {\r\n\r\n        let userId = this.props.match.params.id\r\n        if (!userId) { //если нет id то это мой профиль\r\n            // userId = 11409\r\n            userId = this.props.authorisedUserId\r\n            \r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n                return\r\n            }\r\n        }\r\n        this.props.userInfo(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if ((this.props.match.params.id != prevProps.match.params.id) || (this.props.authorisedUserId != prevProps.authorisedUserId))\r\n            this.refreshProfile()\r\n    }\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} isOwner={!this.props.match.params.id} \r\n            status={this.props.status} \r\n            updateStatus={this.props.updateStatus} \r\n            savePhoto={this.props.savePhoto} \r\n            saveProfile={this.props.saveProfile}/>\r\n        )\r\n    }\r\n\r\n}\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { userInfo, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// export default connect(mapStateToProps, { userInfo })(WithRouterProfile);"],"sourceRoot":""}